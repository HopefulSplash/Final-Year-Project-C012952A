/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Proximity_Encryption_Suite;

import java.awt.Color;
import java.awt.Component;
import java.awt.Frame;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import static javax.swing.SwingConstants.CENTER;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author TheThoetha
 */
public class Folder_Current extends javax.swing.JDialog {

    int accountID;
    String currentName;

    /**
     * Creates new form viewCurrentlyFolder
     *
     * @param parent
     * @param modal
     * @param account_ID
     * @param folderName
     */
    public Folder_Current(java.awt.Frame parent, boolean modal, int account_ID, String folderName) {

        this.getContentPane().setBackground(Color.WHITE);
        /**
         * Declares the icons used for the windows icon and the frames icon.
         */
        URL icon16URL = getClass().getResource("/Proximity/graphic_Logos/Logo_Small.png");
        URL icon32URL = getClass().getResource("/Proximity/graphic_Logos/Logo_Large.png");

        /**
         * Image list to store the icons in.
         */
        final List<Image> icons = new ArrayList<>();

        /**
         * loads the icons into the image list.
         */
        try {
            icons.add(ImageIO.read(icon16URL));
        } catch (IOException ex) {
            Logger.getLogger(Suite_Window.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            icons.add(ImageIO.read(icon32URL));
        } catch (IOException ex) {
            Logger.getLogger(Suite_Window.class.getName()).log(Level.SEVERE, null, ex);
        }

        initComponents();

        /**
         * sets the location of the application to the middle of the screen.
         */
        this.setLocationRelativeTo(this.getParent());
        /**
         * loads the appropriate icons.
         */
        this.setIconImages(icons);

        ok_Button.requestFocus();
        this.accountID = account_ID;
        this.currentName = folderName;

        getFolderFiles();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        folder_Details_Panel = new javax.swing.JPanel();
        name_Label = new javax.swing.JLabel();
        type_Label = new javax.swing.JLabel();
        description_Label = new javax.swing.JLabel();
        created_Label = new javax.swing.JLabel();
        name_Field = new javax.swing.JTextField();
        created_Field = new javax.swing.JTextField();
        type_Field = new javax.swing.JTextField();
        description_Scroll_Pane = new javax.swing.JScrollPane();
        description_Area = new javax.swing.JTextArea();
        content_Table_Scroll_Pane = new javax.swing.JScrollPane();
        content_Table = new javax.swing.JTable();
        contents_Label = new javax.swing.JLabel();
        button_Panel = new javax.swing.JPanel();
        cancel_Button = new javax.swing.JButton();
        modify_Button = new javax.swing.JButton();
        ok_Button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Proximity Suite | Current Folder");
        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(565, 224));
        setModal(true);
        setResizable(false);

        folder_Details_Panel.setBackground(new java.awt.Color(255, 255, 255));
        folder_Details_Panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Folder Details"));

        name_Label.setText("Folder Name: ");

        type_Label.setText("Folder Type: ");

        description_Label.setText("Folder Description: ");

        created_Label.setText("Folder Created: ");

        name_Field.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        name_Field.setFocusable(false);
        name_Field.setRequestFocusEnabled(false);

        created_Field.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        created_Field.setFocusable(false);

        type_Field.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        type_Field.setFocusable(false);

        description_Scroll_Pane.setBackground(new java.awt.Color(255, 255, 255));

        description_Area.setColumns(20);
        description_Area.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        description_Area.setRows(5);
        description_Area.setBorder(null);
        description_Area.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        description_Area.setFocusable(false);
        description_Scroll_Pane.setViewportView(description_Area);

        content_Table_Scroll_Pane.setBackground(new java.awt.Color(255, 255, 255));
        content_Table_Scroll_Pane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        content_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Type", "Size", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        content_Table.setFillsViewportHeight(true);
        content_Table.setFocusable(false);
        content_Table.setRowHeight(23);
        content_Table_Scroll_Pane.setViewportView(content_Table);
        content_Table.getTableHeader().setReorderingAllowed(false);

        content_Table.getColumnModel().getColumn(1).setCellRenderer(new ImageRenderer());
        content_Table.getColumnModel().getColumn(3).setCellRenderer(new ImageRenderer());

        content_Table.getColumnModel().getColumn(1).setMinWidth(60);
        content_Table.getColumnModel().getColumn(1).setMaxWidth(60);

        content_Table.getColumnModel().getColumn(2).setMinWidth(60);
        content_Table.getColumnModel().getColumn(2).setMaxWidth(60);

        content_Table.getColumnModel().getColumn(3).setMinWidth(60);
        content_Table.getColumnModel().getColumn(3).setMaxWidth(60);

        TableCellRenderer rendererFromHeader = content_Table.getTableHeader().getDefaultRenderer();
        JLabel headerLabel = (JLabel) rendererFromHeader;
        headerLabel.setHorizontalAlignment(JLabel.CENTER);

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        content_Table.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );

        for (int a = 0; a < content_Table.getColumnCount(); a++){

            content_Table.getColumnModel().getColumn(a).setResizable(false);

        }
        model = content_Table.getModel();
        sorter = new TableRowSorter<>(model);
        content_Table.setRowSorter(sorter);

        contents_Label.setText("Folder Contents: ");

        javax.swing.GroupLayout folder_Details_PanelLayout = new javax.swing.GroupLayout(folder_Details_Panel);
        folder_Details_Panel.setLayout(folder_Details_PanelLayout);
        folder_Details_PanelLayout.setHorizontalGroup(
            folder_Details_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(folder_Details_PanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(folder_Details_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(folder_Details_PanelLayout.createSequentialGroup()
                        .addComponent(name_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(name_Field))
                    .addGroup(folder_Details_PanelLayout.createSequentialGroup()
                        .addGroup(folder_Details_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(created_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(description_Label, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                            .addComponent(contents_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(type_Label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(folder_Details_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(type_Field)
                            .addComponent(description_Scroll_Pane, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(created_Field, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(content_Table_Scroll_Pane))))
                .addGap(6, 6, 6))
        );
        folder_Details_PanelLayout.setVerticalGroup(
            folder_Details_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(folder_Details_PanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(folder_Details_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(name_Label)
                    .addComponent(name_Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(folder_Details_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(type_Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(type_Label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(folder_Details_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(description_Label)
                    .addComponent(description_Scroll_Pane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(folder_Details_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(contents_Label)
                    .addComponent(content_Table_Scroll_Pane, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(folder_Details_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(created_Label)
                    .addComponent(created_Field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6))
        );

        button_Panel.setBackground(new java.awt.Color(255, 255, 255));

        cancel_Button.setText("Cancel");
        cancel_Button.setFocusPainted(false);
        cancel_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel_ButtonActionPerformed(evt);
            }
        });

        modify_Button.setText("Modify");
        modify_Button.setFocusPainted(false);
        modify_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modify_ButtonActionPerformed(evt);
            }
        });

        ok_Button.setText("OK");
        ok_Button.setFocusPainted(false);
        ok_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ok_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout button_PanelLayout = new javax.swing.GroupLayout(button_Panel);
        button_Panel.setLayout(button_PanelLayout);
        button_PanelLayout.setHorizontalGroup(
            button_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, button_PanelLayout.createSequentialGroup()
                .addContainerGap(308, Short.MAX_VALUE)
                .addComponent(ok_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(modify_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancel_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );
        button_PanelLayout.setVerticalGroup(
            button_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(button_PanelLayout.createSequentialGroup()
                .addGroup(button_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancel_Button)
                    .addComponent(modify_Button)
                    .addComponent(ok_Button))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(button_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(folder_Details_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(6, 6, 6))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(folder_Details_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(button_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancel_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel_ButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cancel_ButtonActionPerformed

    private void modify_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modify_ButtonActionPerformed
        // TODO add your handling code here:
        Folder_Management j1 = new Folder_Management((Frame) this.getParent(), true, accountID, name_Field.getText());
        this.dispose();
        j1.setVisible(true);
    }//GEN-LAST:event_modify_ButtonActionPerformed

    private void ok_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ok_ButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_ok_ButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel button_Panel;
    private javax.swing.JButton cancel_Button;
    private javax.swing.JTable content_Table;
    private javax.swing.JScrollPane content_Table_Scroll_Pane;
    private javax.swing.JLabel contents_Label;
    private javax.swing.JTextField created_Field;
    private javax.swing.JLabel created_Label;
    private javax.swing.JTextArea description_Area;
    private javax.swing.JLabel description_Label;
    private javax.swing.JScrollPane description_Scroll_Pane;
    private javax.swing.JPanel folder_Details_Panel;
    private javax.swing.JButton modify_Button;
    private javax.swing.JTextField name_Field;
    private javax.swing.JLabel name_Label;
    private javax.swing.JButton ok_Button;
    private javax.swing.JTextField type_Field;
    private javax.swing.JLabel type_Label;
    // End of variables declaration//GEN-END:variables

    private TableModel model;
    TableRowSorter<TableModel> sorter;

    private void getFolderFiles() {

        content_Table.setCellSelectionEnabled(false);

        ArrayList<Integer> fileIDList = new ArrayList<>();

        int folderID = 0;
        int fileID = 0;


        /*
         * declares and new instance of the Suite_Database class and then checks if the
         * the database exists and if is does not then creates it for the system.
         */
        Suite_Database d = new Suite_Database();
        d.startDatabase();

        /*
         * declares the variables for use in connecting and checking the database.
         */
        Connection conn = null;
        Statement stmt = null;
        try {

            // Register JDBC driver
            Class.forName("com.mysql.jdbc.Driver");
            conn = DriverManager.getConnection(d.getCONNECT_DB_URL(), d.getUSER(), d.getPASS());

            String sql = "SELECT folder_Details_ID, folder_Name, folder_Type, folder_Description, folder_Created FROM Folder_Details WHERE account_Details_ID = " + accountID + " AND folder_Name = ?;";

            PreparedStatement pStmt = conn.prepareStatement(sql);
            pStmt.setString(1, currentName);

            ResultSet rs = pStmt.executeQuery();

            while (rs.next()) {
                folderID = rs.getInt("folder_Details_ID");
                name_Field.setText(rs.getString("folder_Name"));
                type_Field.setText(rs.getString("folder_Type"));
                description_Area.setText(rs.getString("folder_Description"));
                created_Field.setText(rs.getString("folder_Created"));
            }

            stmt = conn.createStatement();
            sql = "SELECT file_Details_ID FROM Folder_File_List "
                    + "WHERE folder_Details_ID = " + folderID + ";";

            rs = stmt.executeQuery(sql);

            while (rs.next()) {
                fileID = rs.getInt("file_Details_ID");
                fileIDList.add(fileID);
            }
            getAccountFiles(fileIDList);

        } catch (SQLException | ClassNotFoundException se) {
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException ex) {
                }
            }
        }
    }

    public void getAccountFiles(ArrayList<Integer> fileIDList) {
        ArrayList<String> fileDirList = new ArrayList<>();
        ArrayList<Boolean> fileStatusList = new ArrayList<>();

        String fileDir;
        Boolean fileStatus;

        /*
         * declares and new instance of the Suite_Database class and then checks if the
         * the database exists and if is does not then creates it for the system.
         */
        Suite_Database d = new Suite_Database();
        d.startDatabase();

        /*
         * declares the variables for use in connecting and checking the database.
         */
        Connection conn = null;
        Statement stmt = null;
        try {

            // Register JDBC driver
            Class.forName("com.mysql.jdbc.Driver");
            conn = DriverManager.getConnection(d.getCONNECT_DB_URL(), d.getUSER(), d.getPASS());

            for (int i = 0; i < fileIDList.size(); i++) {

                stmt = conn.createStatement();
                String sql = "SELECT file_Directory,  file_EStatus FROM File_Details "
                        + "WHERE file_Details_ID = " + fileIDList.get(i) + ";";

                ResultSet rs = stmt.executeQuery(sql);
                rs = stmt.executeQuery(sql);

                while (rs.next()) {
                    fileDir = rs.getString("file_Directory");
                    fileStatus = rs.getBoolean("file_EStatus");
                    fileDirList.add(fileDir);
                    fileStatusList.add(fileStatus);
                }
            }

            updateTableContents(fileDirList, fileStatusList);

        } catch (SQLException | ClassNotFoundException se) {
        } finally {
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException ex) {
                }
            }

        }
    }

    ArrayList<File> filelists = new ArrayList();

    public void updateTableContents(ArrayList<String> fileDirList, ArrayList<Boolean> fileStatusList) {

        ProcessFilesThread myRunnable = null;

        File file;
        String name;
        String fname;
        int pos;
        String type;
        String fileSize;
        String status;

        if (!fileDirList.isEmpty()) {

            for (String fileDirList1 : fileDirList) {

                myRunnable = new ProcessFilesThread(this, new File(fileDirList1));
                myRunnable.setResultFiles(filelists);
                Thread t = new Thread(myRunnable);
                t.start();
                while (t.isAlive()) {
                }
            }

            DefaultTableModel dw = (DefaultTableModel) content_Table.getModel();

            for (int i = 0; i < filelists.size(); i++) {

                file = filelists.get(i);

                //file name
                fname = file.getName();

                //file extension
                pos = fname.lastIndexOf('.');
                if (pos > 0) {
                    type = fname.substring(pos);
                    name = fname.substring(0, pos);

                } else {
                    type = fname;
                    name = file.getName();
                }

                // size
                fileSize = getFileSize(file.length());

                if (fileStatusList.get(i).equals(false)) {
                    status = "Decrypted";
                } else {
                    status = "Encrypted";
                }

                dw.addRow(new Object[]{" " + name, type, " " + fileSize, status});
            }
        }

    }

    public String getFileSize(double fileLength) {
        int unitSize = 1024;
        if (fileLength < unitSize) {
            return fileLength + " B";
        }
        int exp = (int) (Math.log(fileLength) / Math.log(unitSize));
        char pre = "KMGTPE".charAt(exp - 1);

        String s = String.format(" %sB", pre);

        DecimalFormat df = new DecimalFormat("#.##");
        double we = fileLength / Math.pow(unitSize, exp);

        String ss = df.format(we) + s;

        return ss;
    }

    class ImageRenderer extends DefaultTableCellRenderer {

        ImageIcon icon;

        public ImageRenderer() {
            setVerticalAlignment(CENTER);
            setHorizontalAlignment(CENTER);
            setOpaque(true);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                boolean hasFocus, int row, int column) {

            String fileType = value.toString();

            icon = switchIcon(fileType);

            if (isSelected) {
                setForeground(table.getSelectionForeground());
                setBackground(table.getSelectionBackground());
            } else {
                setForeground(table.getForeground());
                setBackground(UIManager.getColor(Color.WHITE));
            }

            String s = switchToolTip(fileType);
            setToolTipText(s);
            setIcon(icon);
            setHorizontalAlignment(SwingConstants.CENTER);
            setVerticalAlignment(SwingConstants.CENTER);

            return this;
        }

        private String switchToolTip(String fileType) {
            String toolTip = null;

            switch (fileType.toLowerCase()) {

                case "not supported":
                    toolTip = "Encryption Not Supported";
                    break;
                case "decrypted":
                    toolTip = "File Not Encrypted";
                    break;
                case "encrypted":
                    toolTip = "File Encrypted";
                    break;

                default:
                    toolTip = fileType;
                    break;
            }
            return toolTip;
        }

        private ImageIcon switchIcon(String fileType) {
            ImageIcon file_Type_Icon;

            switch (fileType.toLowerCase()) {
                case ".3pg":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_3pg.png"));
                    break;

                case ".7z":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_7z.png"));
                    break;
                case ".ace":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_ace.png"));
                    break;
                case ".ai":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_ai.png"));
                    break;
                case ".aif":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_aif.png"));
                    break;
                case "aiff":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_aiff.png"));
                    break;
                case ".amr":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_amr.png"));
                    break;
                case ".asf":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_asf.png"));
                    break;
                case ".asx":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_asx.png"));
                    break;
                case ".bat":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_bat.png"));
                    break;
                case ".bin":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_bin.png"));
                    break;
                case ".bmp":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_bmp.png"));
                    break;
                case ".bup":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_bup.png"));
                    break;
                case ".cab":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_cab.png"));
                    break;

                case ".cbr":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_cbr.png"));
                    break;

                case ".cda":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_cda.png"));
                    break;
                case ".cdl":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_cdl.png"));
                    break;
                case ".cdr":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_cdr.png"));
                    break;
                case ".chm":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_chm.png"));
                    break;
                case "dat":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_dat.png"));
                    break;
                case ".divx":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_divx.png"));
                    break;
                case ".dll":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_dll.png"));
                    break;
                case ".dmg":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_dmg.png"));
                    break;
                case ".docx":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_doc.png"));
                    break;
                case ".dss":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_dss.png"));
                    break;
                case ".dvf":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_dvf.png"));
                    break;
                case ".dwg":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_dwg.png"));
                    break;
                case ".eml":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_eml.png"));
                    break;
                case ".eps":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_eps.png"));
                    break;
                case ".exe":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_exe.png"));
                    break;
                case ".fla":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_fla.png"));
                    break;
                case ".flv":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_flv.png"));
                    break;
                case ".gif":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_gif.png"));
                    break;
                case ".gz":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_gz.png"));
                    break;
                case ".hqx":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_hqx.png"));
                    break;
                case ".htm":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_htm.png"));
                    break;
                case ".html":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_html.png"));
                    break;
                case ".xml":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_html.png"));
                    break;
                case ".ifo":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_ifo.png"));
                    break;

                case ".indd":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_indd.png"));
                    break;

                case ".iso":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_iso.png"));
                    break;

                case ".jar":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_jar.png"));
                    break;

                case ".jpeg":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_jpeg.png"));
                    break;

                case ".jpg":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_jpg.png"));
                    break;

                case ".lnk":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_lnk.png"));
                    break;
                case ".log":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_log.png"));
                    break;
                case ".m4a":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_m4a.png"));
                    break;
                case ".m4b":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_m4b.png"));
                    break;
                case "m4p":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_m4p.png"));
                    break;
                case ".m4v":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_m4v.png"));
                    break;
                case ".mcd":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_mcd.png"));
                    break;
                case ".mpp":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_mpp.png"));
                    break;
                case ".accdb":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_mdb.png"));
                    break;
                case ".mid":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_mid.png"));
                    break;
                case ".mov":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_mov.png"));
                    break;
                case ".mp3":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_mp2.png"));
                    break;
                case ".mp2":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_mp2.png"));
                    break;
                case ".mp4":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_mp4.png"));
                    break;
                case ".mpeg":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_mpeg.png"));
                    break;

                case ".mpg":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_mpg.png"));
                    break;

                case ".msi":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_msi.png"));
                    break;
                case ".mswmm":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_mswmm.png"));
                    break;
                case ".ogg":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_ogg.png"));
                    break;
                case ".pdf":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_pdf.png"));
                    break;
                case ".png":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_png.png"));
                    break;
                case ".pptx":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_pps.png"));
                    break;
                case ".ps":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_ps.png"));
                    break;
                case ".psd":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_psd.png"));
                    break;
                case ".pst":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_pst.png"));
                    break;
                case ".ptb":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_ptb.png"));
                    break;
                case ".pub":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_pub.png"));
                    break;
                case ".qbb":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_qbb.png"));
                    break;
                case ".qbw":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_qbw.png"));
                    break;
                case ".qxd":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_qxd.png"));
                    break;
                case ".ram":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_ram.png"));
                    break;
                case ".rar":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_rar.png"));
                    break;
                case ".rm":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_rm.png"));
                    break;
                case ".rmvb":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_rmvb.png"));
                    break;
                case ".rtf":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_rtf.png"));
                    break;
                case ".sea":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_sea.png"));
                    break;
                case ".ses":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_ses.png"));
                    break;
                case ".sit":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_sit.png"));
                    break;
                case ".sitx":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_sitx.png"));
                    break;
                case ".ss":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_ss.png"));
                    break;
                case ".swf":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_swf.png"));
                    break;
                case ".tgz":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_tgz.png"));
                    break;
                case ".thm":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_thm.png"));
                    break;
                case ".tif":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_tif.png"));
                    break;

                case ".tmp":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_tmp.png"));
                    break;

                case ".torrent":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_torrent.png"));
                    break;
                case ".ttf":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_ttf.png"));
                    break;
                case ".txt":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_txt.png"));
                    break;
                case ".ini":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_txt.png"));
                    break;
                case ".nfo":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_txt.png"));
                    break;
                case ".jnt":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_txt.png"));
                    break;
                case ".vcd":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_vcd.png"));
                    break;
                case "vob":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_vob.png"));
                    break;
                case ".wav":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_wav.png"));
                    break;
                case ".wma":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_wma.png"));
                    break;
                case ".wmv":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_wmv.png"));
                    break;
                case ".wps":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_wps.wps"));
                    break;
                case ".xlsx":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_xls.png"));
                    break;
                case ".xpi":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_xpi.png"));
                    break;
                case ".zip":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_zip.png"));
                    break;
                case ".m3u":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_wmv.png"));
                    break;

                case "not supported":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_Status/lock_break.png"));
                    break;
                case "decrypted":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_Status/lock_open.png"));
                    break;
                case "encrypted":
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_Status/lock.png"));
                    break;

                default:
                    file_Type_Icon = new javax.swing.ImageIcon(getClass().getResource("/Proximity/graphic_Table/graphic_File/file_extension_blank.png"));
                    break;
            }

            return file_Type_Icon;
        }

    }
}
